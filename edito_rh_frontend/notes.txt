-------------------grid list-------------------------
-
https://www.concretepage.com/angular-material/angular-material-grid-list
https://material.angularjs.org/1.1.1/demo/gridList
https://material.angular.io/components/grid-list/overview
https://www.tutorialspoint.com/angular_material7/angular_material7_grid_list.htm
-
mat-grid-list cols="4" rowHeight="100px"  gutterSize="15px"
guttersize space btw elements
-
<mat-grid-tile rowspan="2" colspan="2">1111</mat-grid-tile>

rowspan: how many rows the column will take
colspan: number of columns teh item will take
-
-forms
https://angular.io/api/forms/AbstractControl#value
-create a guard
ng g guard auth
-
!!x (if x exist return true, otherwise return false)
-
--------------------effects-------------------------
-https://www.youtube.com/watch?v=uyW48EQge-8&t=492s
-
creating of updating something : use concatMap
GET/ use exhaustMap
deleting: mergeMap 
don t need the previous record:switchMap
-
flatMap/mergeMap - creates an Observable immediately for any source item, all previous Observables are kept alive. Note flatMap is an alias for mergeMap and flatMap will be removed in RxJS 8.
concatMap - waits for the previous Observable to complete before creating the next one
switchMap - for any source item, completes the previous Observable and immediately creates the next one
exhaustMap - source items are ignored while the previous Observable is not completed
-
-----------------------------------------------------
-confirmer =>send request api=> page 1, each time 


-api url
http://example.com/articles?color=red&date=value1?sort=+author,-datepublished?offset=10&limit=5

(created by dale or elaine or jules)
createdBy=dale|elaine|jules  

BETTER WAY:
Filtering with the filter query parameter

?filter=and(eq(createdBy,'dale'),eq(name,'Production%20Report'))
 lt(a,b,c,d) is equivalent to and(lt(a,b),lt(b,c),lt(c,d)) (that is, a < b && b < c && c < d.)
and(le(minInclusive,x),lt(x,maxExclusive)).    (minInclusive â‰¤ x < maxExclusive)

eq($tertiary, a, b,...) (equal)
ne($tertiary, a, b) (not equal)
lt($tertiary, a, b,...) (less than)
le($tertiary, a, b,...) (less than or equal)
gt($tertiary, a, b,...) (greater than)
ge($tertiary, a, b,...) (greater than or equal)
in($tertiary, e, v0, v1 [,..., vn])
contains($tertiary, e, substring)
startsWith($tertiary, e, prefix)
endsWith($tertiary, e, suffix)
https://developer.sas.com/reference/filtering/


(specify the columns needed)
?fields=items.id,items.displayName 

//important url
https://developer.sas.com/reference/filtering/

url encoded

error messsage format=
{
  "errors": [
   {
    "userMessage": "Sorry, the requested resource does not exist",
    "internalMessage": "No car found in the database",
    "code": 34,
    "more info": "http://dev.mwaysolutions.com/blog/api/v1/errors/12345"
   }
  ]
}

rest api best practices
https://medium.com/@mwaysolutions/10-best-practices-for-better-restful-api-33a25a4e92c1

https://restfulapi.net/resource-naming/

LHS BracketsPermalink
and => ,
or =>;
no need 
https://stackoverflow.com/questions/40618327/how-to-design-generic-filtering-operators-in-the-query-string-of-an-api
------------------------------------------------

    //page 1   limit=100    offset=0
    //page 2   limit=100    offset=100
------------------------------------------------
For REST, I prefer a more intuitive syntax:

http://myapp.com/books?sort=author,-datepublished&count=12

Easy to remember... (means: ORDER BY author ASC, datepublished DESC)

note: removed "+" prefix because is a reserved word

-------------------subjects----------------------------- 
-subject
when you submit sub.next(2)
all the people who are subscribed to the subject receive 2
but you need to subscribe before sending the next
    sub.subscribe((data:number)=>{
      console.log('i got it')
      console.log(data)
    })
    sub.next(2)
-behavior subject
you give it an initial value
the behavior subject store the values 
you can add value before or after the subscription
you're sure to get the current value
----------------refresh token------------------------------
https://dev-academy.com/angular-jwt/?utm_source=youtube&utm_medium=social&utm_campaign=video&utm_term=angular_jwt_video&utm_content=F1GUjHPpCLA
--------paginator-----------------
[pageSize]="10" items per page

-------filters----------------
1-you choose a filter
2-updateChosenField()
3-it calls getField 
4-it makes
this.chosenFileld={
        type: 'string',
        required: true,
        read_only: false,
        label: 'Designation',
        max_length: 255,
        initial: '',
        field_name: 'designation',
        write_only: false
      }
TODO 
it needs to be like that 
Field{
    label:string,
    type:FieldType,
    values?:any[]
}
5-

























----------------------------------------------------------

//-------------------------------------------------------------------------------------------
      /*if(request.url==='http://127.0.0.1:8000/api/v1/auth/refresh/'){
        return next.handle(request)
      }
        

      if(Date.now()>Number(refresh_token_payload.exp)*1000){
        this.handleExpiredRefreshToken()
      }

      if(Date.now()<Number(access_token_payload.exp)*1000){
        return this.handleAccessTokenValid(request,next,access_token)
      }
      else{//////////////////////////////////////////////////////////////////////
        if(!this.isRefreshing){
          this.isRefreshing=true
          this.requests.next(null)
          this.authService.getNewAccessToken(access_token,refresh_token).pipe(
            switchMap((res)=>{
              this.storageService.setItem('access_token',res.token)
              return this.addAccessTokenToRequest(request,res.token)
            })
          )
        }
        console.log('expiredddddd')
        //let this.requests.next({request,access_token:a})
        console.log(request)




        /*this.store.dispatch(getAccessTokenStart({access_token,refresh_token}))
        this.store.pipe(
          select(getAccessTokenSuccessSelector),
          filter( val=> val !== undefined)
          )
          .subscribe((a)=>{
            console.log('helooooooooooooo')
            this.requests.next({request,access_token:a})
          })*/
      /*this.requests.pipe(
        filter(val=>val!=null),
        take(1),
        switchMap((req:any)=>{
          console.log('subject values')
          console.log(req)
          const requ=req.request
          const acc=req.access_token
          
          const newReq=requ.clone({
            headers:requ.headers.set("Authorization",`Bearer ${acc}`)
          })
          return next.handle(newReq);
        })
      ).subscribe()
        //return this.handleAccessTokenExpired(request,next,access_token,refresh_token)
      }
    }
    return next.handle(request);*/